import com.amazonaws.services.sns.AmazonSNSAsync
import io.onema.forwarder.Logic
import io.onema.forwarder.Logic.SesMessage
import io.onema.json.Extensions._
import org.scalamock.scalatest.MockFactory
import org.scalatest.{FlatSpec, Matchers}

/**
  * This file is part of the ONEMA lambda-mailer Package.
  * For the full copyright and license information,
  * please view the LICENSE file that was distributed
  * with this source code.
  *
  * copyright (c) 2018, Juan Manuel Torres (http://onema.io)
  *
  * @author Juan Manuel Torres <foo@foo.com>
  */

class ForwarderLogicTest extends FlatSpec with Matchers with MockFactory {


  "An valid email" should "forward an SNS notification" in {

    // Arrange
    val message = "{\"notificationType\":\"Received\",\"mail\":{\"timestamp\":\"2018-08-07T20:05:07.491Z\",\"source\":\"replyto@test.com\",\"messageId\":\"peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\",\"destination\":[\"foo@foo.com\"],\"headersTruncated\":false,\"headers\":[{\"name\":\"Return-Path\",\"value\":\"<replyto@test.com>\"},{\"name\":\"Received\",\"value\":\"from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230]) by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1 for foo@foo.com; Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\"},{\"name\":\"Content-Length\",\"value\":\"1711\"}],\"commonHeaders\":{\"returnPath\":\"replyto@test.com\",\"from\":[\"Juan Torres <replyto@test.com>\"],\"date\":\"Tue, 7 Aug 2018 20:01:06 +0000 (UTC)\",\"to\":[\"\\\"foo@foo.com\\\" <foo@foo.com>\"],\"messageId\":\"<176128054.3622731.1533672066691@mail.yahoo.com>\",\"subject\":\"test all things\"}},\"receipt\":{\"timestamp\":\"2018-08-07T20:05:07.491Z\",\"processingTimeMillis\":406,\"recipients\":[\"foo@foo.com\"],\"spamVerdict\":{\"status\":\"PASS\"},\"virusVerdict\":{\"status\":\"PASS\"},\"spfVerdict\":{\"status\":\"PASS\"},\"dkimVerdict\":{\"status\":\"PROCESSING_FAILED\"},\"dmarcVerdict\":{\"status\":\"PASS\"},\"action\":{\"type\":\"SNS\",\"topicArn\":\"arn:aws:sns:us-east-1:065150860170:dev-mail-forwarder\",\"encoding\":\"UTF8\"}},\"content\":\"Return-Path: <replyto@test.com>\\r\\nReceived: from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230])\\r\\n by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\\r\\n for foo@foo.com;\\r\\n Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\\r\\nX-SES-Spam-Verdict: PASS\\r\\nX-SES-Virus-Verdict: PASS\\r\\nReceived-SPF: pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=replyto@test.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\nAuthentication-Results: amazonses.com;\\r\\n spf=pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=replyto@test.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\n dkim=permerror header.i=@ymail.com;\\r\\nFrom: Juan Torres <replyto@test.com>\\r\\nTo: \\\"foo@foo.com\\\" <foo@foo.com>\\r\\nMessage-ID: <176128054.3622731.1533672066691@mail.yahoo.com>\\r\\nSubject: test all things\\r\\nMIME-Version: 1.0\\r\\nContent-Type: multipart/alternative; \\r\\n\\tboundary=\\\"----=_Part_3622730_1056715004.1533672066689\\\"\\r\\nReferences: <176128054.3622731.1533672066691.ref@mail.yahoo.com>\\r\\nX-Mailer: WebService/1.1.12206 YMailNorrin Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\\r\\nContent-Length: 1711\\r\\n\\r\\n------=_Part_3622730_1056715004.1533672066689\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\nContent-Transfer-Encoding: quoted-printable\\r\\n\\r\\nFooBarbazbax=C2=A0 =C2=A0=C2=A0\\r\\n\\r\\nHeading\\r\\nImage\\r\\n  Via =20\\r\\n\"}"
    val expectedRequest = "{\"to\":[\"bar@bar.com\"],\"from\":\"foo@foo.com\",\"subject\":\"test all things\",\"body\":\"Return-Path: <foo@foo.com>\\r\\nReceived: from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230])\\r\\n by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\\r\\n for foo@foo.com;\\r\\n Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\\r\\nX-SES-Spam-Verdict: PASS\\r\\nX-SES-Virus-Verdict: PASS\\r\\nReceived-SPF: pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=foo@foo.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\nAuthentication-Results: amazonses.com;\\r\\n spf=pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=foo@foo.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\n dkim=permerror header.i=@ymail.com;\\r\\nFrom: foo@foo.com\\r\\nReply-To: Juan Torres <replyto@test.com>\\r\\nTo: \\\"foo@foo.com\\\" <foo@foo.com>\\r\\nMessage-ID: <176128054.3622731.1533672066691@mail.yahoo.com>\\r\\nSubject: test all things\\r\\nMIME-Version: 1.0\\r\\nContent-Type: multipart/alternative; \\r\\n\\tboundary=\\\"----=_Part_3622730_1056715004.1533672066689\\\"\\r\\nReferences: <176128054.3622731.1533672066691.ref@mail.yahoo.com>\\r\\nX-Mailer: WebService/1.1.12206 YMailNorrin Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\\r\\nContent-Length: 1711\\r\\n\\r\\n------=_Part_3622730_1056715004.1533672066689\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\nContent-Transfer-Encoding: quoted-printable\\r\\n\\r\\nFooBarbazbax=C2=A0 =C2=A0=C2=A0\\r\\n\\r\\nHeading\\r\\nImage\\r\\n  Via =20\\r\\n\",\"replyTo\":\"Juan Torres <replyto@test.com>\",\"raw\":true}"
    val emailMapping = "foo@foo.com=bar@bar.com"
    val clientMock = mock[AmazonSNSAsync]
    (clientMock.publish(_: String, _: String)).expects("some_topic", expectedRequest)
    val logic = new Logic(snsClient = clientMock, mailerTopic = "some_topic")

    // Act
    val sesMessage = message.jsonDecode[SesMessage]

    // Assert
    logic.handleRequest(sesMessage, emailMapping)
  }

  "An Email not in the email mapping" should "generate an exception" in {

    // Arrange
    val message = "{\"notificationType\":\"Received\",\"mail\":{\"timestamp\":\"2018-08-07T20:05:07.491Z\",\"source\":\"replyto@test.com\",\"messageId\":\"peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\",\"destination\":[\"foo@foo.com\"],\"headersTruncated\":false,\"headers\":[{\"name\":\"Return-Path\",\"value\":\"<replyto@test.com>\"},{\"name\":\"Received\",\"value\":\"from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230]) by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1 for foo@foo.com; Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\"},{\"name\":\"Content-Length\",\"value\":\"1711\"}],\"commonHeaders\":{\"returnPath\":\"replyto@test.com\",\"from\":[\"Juan Torres <replyto@test.com>\"],\"date\":\"Tue, 7 Aug 2018 20:01:06 +0000 (UTC)\",\"to\":[\"\\\"foo@foo.com\\\" <foo@foo.com>\"],\"messageId\":\"<176128054.3622731.1533672066691@mail.yahoo.com>\",\"subject\":\"test all things\"}},\"receipt\":{\"timestamp\":\"2018-08-07T20:05:07.491Z\",\"processingTimeMillis\":406,\"recipients\":[\"foo@foo.com\"],\"spamVerdict\":{\"status\":\"PASS\"},\"virusVerdict\":{\"status\":\"PASS\"},\"spfVerdict\":{\"status\":\"PASS\"},\"dkimVerdict\":{\"status\":\"PROCESSING_FAILED\"},\"dmarcVerdict\":{\"status\":\"PASS\"},\"action\":{\"type\":\"SNS\",\"topicArn\":\"arn:aws:sns:us-east-1:065150860170:dev-mail-forwarder\",\"encoding\":\"UTF8\"}},\"content\":\"Return-Path: <replyto@test.com>\\r\\nReceived: from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230])\\r\\n by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\\r\\n for foo@foo.com;\\r\\n Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\\r\\nX-SES-Spam-Verdict: PASS\\r\\nX-SES-Virus-Verdict: PASS\\r\\nReceived-SPF: pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=replyto@test.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\nAuthentication-Results: amazonses.com;\\r\\n spf=pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=replyto@test.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\n dkim=permerror header.i=@ymail.com;\\r\\nFrom: Juan Torres <replyto@test.com>\\r\\nTo: \\\"foo@foo.com\\\" <foo@foo.com>\\r\\nMessage-ID: <176128054.3622731.1533672066691@mail.yahoo.com>\\r\\nSubject: test all things\\r\\nMIME-Version: 1.0\\r\\nContent-Type: multipart/alternative; \\r\\n\\tboundary=\\\"----=_Part_3622730_1056715004.1533672066689\\\"\\r\\nReferences: <176128054.3622731.1533672066691.ref@mail.yahoo.com>\\r\\nX-Mailer: WebService/1.1.12206 YMailNorrin Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\\r\\nContent-Length: 1711\\r\\n\\r\\n------=_Part_3622730_1056715004.1533672066689\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\nContent-Transfer-Encoding: quoted-printable\\r\\n\\r\\nFooBarbazbax=C2=A0 =C2=A0=C2=A0\\r\\n\\r\\nHeading\\r\\nImage\\r\\n  Via =20\\r\\n\"}"
    val expectedRequest = "{\"to\":[\"bar@bar.com\"],\"from\":\"foo@foo.com\",\"subject\":\"test all things\",\"body\":\"Return-Path: <foo@foo.com>\\r\\nReceived: from sonic302-31.consmr.mail.bf2.yahoo.com (sonic302-31.consmr.mail.bf2.yahoo.com [74.6.135.230])\\r\\n by inbound-smtp.us-east-1.amazonaws.com with SMTP id peln35k65ghljnavl0m8hdlbq0omhsm7ti51g9g1\\r\\n for foo@foo.com;\\r\\n Tue, 07 Aug 2018 20:05:07 +0000 (UTC)\\r\\nX-SES-Spam-Verdict: PASS\\r\\nX-SES-Virus-Verdict: PASS\\r\\nReceived-SPF: pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=foo@foo.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\nAuthentication-Results: amazonses.com;\\r\\n spf=pass (spfCheck: domain of _spf.mail.yahoo.com designates 74.6.135.230 as permitted sender) client-ip=74.6.135.230; envelope-from=foo@foo.com; helo=sonic302-31.consmr.mail.bf2.yahoo.com;\\r\\n dkim=permerror header.i=@ymail.com;\\r\\nFrom: foo@foo.com\\r\\nReply-To: Juan Torres <replyto@test.com>\\r\\nTo: \\\"foo@foo.com\\\" <foo@foo.com>\\r\\nMessage-ID: <176128054.3622731.1533672066691@mail.yahoo.com>\\r\\nSubject: test all things\\r\\nMIME-Version: 1.0\\r\\nContent-Type: multipart/alternative; \\r\\n\\tboundary=\\\"----=_Part_3622730_1056715004.1533672066689\\\"\\r\\nReferences: <176128054.3622731.1533672066691.ref@mail.yahoo.com>\\r\\nX-Mailer: WebService/1.1.12206 YMailNorrin Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\\r\\nContent-Length: 1711\\r\\n\\r\\n------=_Part_3622730_1056715004.1533672066689\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\nContent-Transfer-Encoding: quoted-printable\\r\\n\\r\\nFooBarbazbax=C2=A0 =C2=A0=C2=A0\\r\\n\\r\\nHeading\\r\\nImage\\r\\n  Via =20\\r\\n\",\"replyTo\":\"Juan Torres <replyto@test.com>\",\"raw\":true}"
    val emailMapping = "different@email.com=bar@bar.com"
    val clientMock = mock[AmazonSNSAsync]
    val logic = new Logic(snsClient = clientMock, mailerTopic = "some_topic")

    // Act - Assert
    val sesMessage = message.jsonDecode[SesMessage]
    intercept[Exception] { logic.handleRequest(sesMessage, emailMapping) }

  }
}
