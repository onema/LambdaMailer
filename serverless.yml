#
# This file is part of the ONEMA onema Package.
# For the full copyright and license information,
# please view the LICENSE file that was distributed
# with this source code.
#
# copyright (c) 2018, Juan Manuel Torres (http://onema.io)
#
# @author Juan Manuel Torres <software@onema.io>
#
service: lambda-mailer

provider:
  name: aws
  runtime: java8
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false


# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource:
        - "arn:aws:sns:*:*:${self:custom.stageName}-mailer-bounce"
        - "arn:aws:sns:*:*:${self:custom.stageName}-bounce-error-topic"
        - "arn:aws:sns:*:*:${self:custom.stageName}-mailer"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
      Resource:
        - Fn::GetAtt: [ DynamoDBTable, Arn ]
        - Fn::Join: ["/", [ Fn::GetAtt: [DynamoDBTable, Arn], "index", "*"]]
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - "*"

# you can define service wide environment variables here
  environment:
    STAGE_NAME: ${self:custom.stageName}
    LOG_EMAIL: false
    SNS_ERROR_TOPIC:
      Fn::Join: [':', ["arn:aws:sns", Ref: "AWS::Region", Ref: "AWS::AccountId","${self:custom.stageName}-bounce-error-topic"]]
    SNS_MAILER_TOPIC:
      Fn::Join: [':', ["arn:aws:sns", Ref: "AWS::Region", Ref: "AWS::AccountId", "${self:custom.stageName}-mailer"]]

# Custom values. These can be referenced in the Cloud Formation template
custom:
  stageName: ${opt:stage, self:provider.stage}

# you can add packaging information here
# Make sure to run "sbt assembly" to create a jar file
# with all your dependencies and put that jar file name here.
package:
  artifact: target/scala-2.12/app.jar

functions:

  # functions
  mailer-bounce:
    handler: io.onema.bounce.Function::lambdaHandler
    events:
      - sns: ${self:custom.stageName}-mailer-bounce

  mailer:
    handler: io.onema.mailer.Function::lambdaHandler
    events:
      - sns: ${self:custom.stageName}-mailer

  forwarder:
    handler: io.onema.forwarder.Function::lambdaHandler
#    environment:
#      EMAIL_MAPPING: "foo@bar.com=baz@balh.com,baz1@balh.com&foo2@bar.com=blah@balh.com"
    events:
      - sns: ${self:custom.stageName}-mail-forwarder

# you can add CloudFormation resource templates here
resources:
  Parameters:
    TableName:
      Type: String
      Default: SESNotifications
      Description: The name of the dynamodb table
    PartitionKey:
      Type: String
      Default: MessageId
      Description: The name of the main parition key
    SortKey:
      Type: String
      Default: SnsPublishTime
      Description: The name of the primary sort key
    SecondaryIndex:
      Type: String
      Default: DestinationAddress
      Description: The name of the secondary index
    ReadCapacityUnits:
      Default: 1
      Description: Dynamo read capacity units
      Type: Number
    WriteCapacityUnits:
      Default: 1
      Description: Dynamo write capacity units
      Type: Number

  Resources: ${file(infrastructure/bounce-table_cfn.yml):Resources}

